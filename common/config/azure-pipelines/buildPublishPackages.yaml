trigger: none

stages:
- stage: build
  displayName: Build
  jobs:
  - job: build_packages
    displayName: Build
    pool:
      name: iModelTechCI
      demands:
      - Agent.OS -equals Windows_NT
      - npm
    variables:
    - group: azure-artifacts-npm-token

    workspace:
      clean: all
    steps:
      - checkout: self
        clean: all
      - task: NodeTool@0
        displayName: 'Install Node 10.15.x'
        inputs:
          versionSpec: 10.15.0
          checkLatest: true

      - powershell: |
          $nugetConfigDir = "$(Build.Repository.LocalPath)"
    
          if(!(Test-Path -Path $nugetConfigDir)){
              mkdir $nugetConfigDir
          }
    
          $nugetConfigFile = $nugetConfigDir + "/NuGet.Config"

          Out-File -FilePath $nugetConfigFile -Encoding ascii -InputObject '<?xml version="1.0" encoding="utf-8"?>'
          Out-File -FilePath $nugetConfigFile -Encoding ascii -InputObject '<configuration>' -Append
          Out-File -FilePath $nugetConfigFile -Encoding ascii -InputObject '<packageSources>' -Append
          Out-File -FilePath $nugetConfigFile -Encoding ascii -InputObject '<clear />' -Append
          Out-File -FilePath $nugetConfigFile -Encoding ascii -InputObject '<add key="Packages" value="https://www.nuget.org/n" />' -Append
          Out-File -FilePath $nugetConfigFile -Encoding ascii -InputObject '</packageSources>' -Append
          Out-File -FilePath $nugetConfigFile -Encoding ascii -InputObject '</configuration>' -Append

        displayName: 'Seed NugetConfig'  

      - task: NuGetCommand@2
        displayName: 'Download Nuget of Signoff Tool'
        inputs:
          command: custom
          arguments: 'install SchemaSignoffNuGet_x64 -OutputDirectory $(System.DefaultWorkingDirectory) -Source https://www.nuget.org/n'

      - powershell: |
          $dir = Get-ChildItem $(System.DefaultWorkingDirectory) | Where-Object {$_.name -like "SchemaSignoffNuGet_x64*"}

          Write-Host "SignoffToolPath=$(System.DefaultWorkingDirectory)\$dir\lib\native\SchemaSignoffTool.exe"
          Write-Host "##vso[task.setvariable variable=SignoffToolPath]$(System.DefaultWorkingDirectory)\$dir\lib\native\SchemaSignoffTool.exe"
        failOnStderr: true
        displayName: 'Set Env for Signoff Tool Path'
        env:
          rootDir: $(System.DefaultWorkingDirectory)
          packageName: SchemaSignoffNuGet_bim0200dev_x64

      #Your build pipeline references a secret variable named ‘artifactsRegistryToken’. This variable is pulled from the 'arzure-artifacts-npm-token' variable group.  You must authorize this build to use that group: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml#use-a-variable-group
      - powershell: |
          $npmrcDir = "$(System.DefaultWorkingDirectory)/common/config/rush"

          if(!(Test-Path -Path $npmrcDir)){
              mkdir $npmrcDir
          }

          $npmrcFile = $npmrcDir + "/.npmrc"

          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "@bentley:registry=https://pkgs.dev.azure.com/bentleycs/_packaging/Packages/npm/registry/"
          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "always-auth=true" -Append
          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "//pkgs.dev.azure.com/bentleycs/_packaging/Packages/npm/registry/:username=Packages" -Append
          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "//pkgs.dev.azure.com/bentleycs/_packaging/Packages/npm/registry/:_password=$(artifactsRegistryToken)" -Append
          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "//pkgs.dev.azure.com/bentleycs/_packaging/Packages/npm/registry/:email=npm requires email to be set but doesn't use the value" -Append
          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "//pkgs.dev.azure.com/bentleycs/_packaging/Packages/npm/:username=Packages" -Append
          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "//pkgs.dev.azure.com/bentleycs/_packaging/Packages/npm/:_password=$(artifactsRegistryToken)" -Append
          Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "//pkgs.dev.azure.com/bentleycs/_packaging/Packages/npm/:email=npm requires email to be set but doesn't use the value" -Append

        displayName: 'Seed npmrc'

      - script: rush install
        displayName: Rush install
      - script: rush clean
        displayName: Rush clean
      - script: rush lint
        displayName: Rush lint
      - script: rush build
        displayName: Rush build
      - script: rush cover
        displayName: Rush cover
        env:
          imsUserName: $(imsUserName)
          imsPassword: $(imsPassword)
          Mapped_domUserName: $(Mapped_domUserName)
          Mapped_domPassword: $(Mapped_domPassword)

      - task: PublishCodeCoverageResults@1
        displayName: Publish bis-rules code coverage
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/bis-rules/lib/test/coverage/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/bis-rules/lib/test/coverage/lcov-report'

      - task: PublishCodeCoverageResults@1
        displayName: Publish schema-validator code coverage
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/schema-validator/lib/test/coverage/cobertura-coverage.xml'
          reportDirectory: '$(Build.Repository.LocalPath)/schema-validator/lib/test/coverage/lcov-report'

      - script: rush publish --publish --pack --include-all
        displayName: 'rush publish pack'
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual', 'BuildCompletion'))
      - task: PythonScript@0
        displayName: 'Gather packages for release'
        inputs:
          scriptSource: inline
          script: |
            import sys, os, glob, re, subprocess
            import shutil

            artifactStagingDir = os.path.realpath(sys.argv[1])
            sourcesDirectory = os.path.realpath(sys.argv[2])

            ## Setup
            stagingDir = os.path.join(artifactStagingDir, "bis-schema-tools", "packages")
            os.makedirs(stagingDir)

            packageDir = os.path.join(sourcesDirectory, "common", "temp", "artifacts", "packages")
            print ("packageDir = " + packageDir)

            artifactPaths = glob.glob(os.path.join(packageDir, "*.tgz"))

            packagesToPublish = False
            for artifact in artifactPaths:
              baseName = os.path.basename(artifact)
              print ("")
              print ("Checking package: '" + baseName + "'...")

              localVer = re.search(r'(\d\.\d.*).tgz', baseName)
              localVer = localVer.group(1)

              packageName = baseName[:(len(baseName) - len(localVer) - 5)]
              packageName = "@" + packageName.replace("-", "/", 1)

              command = "npm view " + packageName + "@" + localVer + " version"
              proc = subprocess.Popen(command, stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)

              # We are going to assume if a version is provided back from the above call, that this version exists
              # on the server.  Otherwise, it returns an empty string.
              serverVer = proc.communicate()[0]

              if proc.returncode != 0:
                packagesToPublish = True
                print ("The package does not yet exist.  Copying " + packageName + " to staging area.")
                shutil.copy(artifact, stagingDir)
                continue

              if 0 != len(serverVer):
                print ("The version already exists.  Skipping...")
                continue

              packagesToPublish = True
              print ("Local version is newer than on the server.  Copying package " + packageName + " to staging area.")
              shutil.copy(artifact, stagingDir)

            if packagesToPublish:
              print ("There are packages to publish.")
              print ("##vso[build.addbuildtag]package-release")
            else:
              print ("All packages are up-to-date.")

          arguments: '$(Build.ArtifactStagingDirectory) $(Build.SourcesDirectory)'
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual', 'BuildCompletion'))
      - script: |
          dir $(Build.ArtifactStagingDirectory)\bis-schema-tools\packages
          dir $(Build.ArtifactStagingDirectory)\
          dir $(Build.ArtifactStagingDirectory)\bis-schema-tools\
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual', 'BuildCompletion'))
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact: packages'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/bis-schema-tools/packages'
          artifact: packages
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual', 'BuildCompletion'))
- stage: publish
  dependsOn: build
  displayName: Publish
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual', 'BuildCompletion'))
  jobs:
  - job: publish_artifacts
    displayName: Publish packages to Artifacts
    strategy:
      maxParallel: 2
      matrix:
        'Windows':
          os: vs2017-win2016
    pool:
      vmImage: $(os)
    variables:
    - group: azure-artifacts-npm-token
    - name: packsDir
      value: $(System.ArtifactsDirectory)/packages/

    steps:
    - checkout: none
      clean: true
    - task: DownloadPipelineArtifact@1
      displayName: Download packages to publish
      inputs:
        buildType: current
        artifactName: packages
        targetPath: $(packsDir)

    - template: ./seed-npmrc.yaml
      parameters: { artifactsRegistryToken: $(artifactsRegistryToken) }

    - powershell: |
        $artifactPaths = Get-ChildItem "$(packsDir)\*.tgz"

        Push-Location $(System.ArtifactsDirectory)/packages/

        npm config list

        foreach ($artifactPath in $artifactPaths) {
          Write-Output ""
          Write-Output ("Processing Artifact: '" + $artifactPath.Name + "'...")

          $cmd = "npm publish $artifactPath 2> `$null"

          Write-Output ("Running '" + $cmd + "'...")

          npm publish $artifactPath
          Write-Output ("Done processing Artifact: '" + $artifactPath.Name + "'...")
        }

        Pop-Location