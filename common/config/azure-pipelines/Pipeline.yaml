trigger:
- master

stages:
- stage: build
  displayName: Build
  jobs:
  - job: build_packages
    displayName: Build
    strategy:
      maxParallel: 2
      matrix:
        'Windows':
          os: Windows_NT
    pool:
      name: iModelTechCI
      demands:
        agent.os -equals $(os)
    workspace:
      clean: all
    steps:
      - checkout: self
        clean: all
      - task: NodeTool@0
        displayName: 'Install Node 10.15.x'
        inputs:
          versionSpec: 10.15.0
          checkLatest: true

      #Your build pipeline references a secret variable named ‘artifactsRegistryToken’. This variable is pulled from the 'arzure-artifacts-npm-token' variable group.  You must authorize this build to use that group: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml#use-a-variable-group
      - template: ./seed-npmrc.yaml
        parameters:
          npmrcDir: $(System.DefaultWorkingDirectory)
          artifactsRegistryToken: ${artifactsRegistryToken}

      - script: node ./common/scripts/install-run-rush.js install
        displayName: Rush install
      - script: node ./common/scripts/install-run-rush.js clean
        displayName: Rush clean
      - script: node ./common/scripts/install-run-rush.js lint
        displayName: Rush lint
      - script: node ./common/scripts/install-run-rush.js build
        displayName: Rush build
      - script: node ./common/scripts/install-run-rush.js cover
        displayName: Rush cover

      - task: PublishCodeCoverageResults@1
        displayName: Publish bis-rules code coverage
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/bis-rules/lib/test/coverage/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/bis-rules/lib/test/coverage/lcov-report'

      - task: PublishCodeCoverageResults@1
        displayName: Publish schema-validator code coverage
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/schema-validator/lib/test/coverage/cobertura-coverage.xml'
          reportDirectory: '$(Build.Repository.LocalPath)/schema-validator/lib/test/coverage/lcov-report'

      - task: CmdLine@1
        displayName: 'rush publish pack'
        inputs:
          filename: rush
          arguments: 'publish --publish --pack --include-all'
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['os'], 'Windows_NT'))
      - task: PythonScript@0
        displayName: 'Gather packages for release'
        inputs:
          scriptSource: inline
          script: |
            import sys, os, glob, re, subprocess
            import shutil

            artifactStagingDir = os.path.realpath(sys.argv[1])
            sourcesDirectory = os.path.realpath(sys.argv[2])

            ## Setup
            stagingDir = os.path.join(artifactStagingDir, "bis-schema-tools", "packages")
            os.makedirs(stagingDir)

            packageDir = os.path.join(sourcesDirectory, "common", "temp", "artifacts", "packages")
            print "packageDir = " + packageDir
            registryUrl = "http://nuget.bentley.com/npm/npm/"

            artifactPaths = glob.glob(os.path.join(packageDir, "*.tgz"))

            packagesToPublish = False
            for artifact in artifactPaths:
              baseName = os.path.basename(artifact)
              print ""
              print "Checking package: '" + baseName + "'..."

              localVer = re.search(r'(\d\.\d.*).tgz', baseName)
              localVer = localVer.group(1)

              packageName = baseName[:(len(baseName) - len(localVer) - 5)]
              packageName = "@" + packageName.replace("-", "/", 1)

              command = "npm view --registry=" + registryUrl + " " + packageName + "@" + localVer + " version"
              proc = subprocess.Popen(command, stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)

              # We are going to assume if a version is provided back from the above call, that this version exists
              # on the server.  Otherwise, it returns an empty string.
              serverVer = proc.communicate()[0]

              if proc.returncode != 0:
                packagesToPublish = True
                print "The package does not yet exist.  Copying " + packageName + " to staging area."
                shutil.copy(artifact, stagingDir)
                continue

              if 0 != len(serverVer):
                print "The version already exists.  Skipping..."
                continue

              packagesToPublish = True
              print "Local version is newer than on the server.  Copying package " + packageName + " to staging area."
              shutil.copy(artifact, stagingDir)

            if packagesToPublish:
              print "There are packages to publish."
              print "##vso[build.addbuildtag]package-release"
            else:
              print "All packages are up-to-date."

          arguments: '$(Build.ArtifactStagingDirectory) $(Build.SourcesDirectory)'
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['os'], 'Windows_NT'))
      - script: |
          dir $(Build.ArtifactStagingDirectory)\bis-schema-tools\packages
          dir $(Build.ArtifactStagingDirectory)\
          dir $(Build.ArtifactStagingDirectory)\bis-schema-tools\
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['os'], 'Windows_NT'))
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact: packages'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/bis-schema-tools/packages'
          artifact: packages
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['os'], 'Windows_NT'))
- stage: publish
  dependsOn: build
  displayName: Publish
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'))
  jobs:
  - job: publish_artifacts
    displayName: Publish packages to Artifacts
    pool: Hosted VS2017
    variables:
      packsDir: $(System.ArtifactsDirectory)/packages/
    steps:
    - checkout: none
      clean: true
    - task: DownloadPipelineArtifact@1
      displayName: Download packages to publish
      inputs:
        buildType: current
        artifactName: packages
        targetPath: $(packsDir)

    #Your build pipeline references a secret variable named ‘artifactsRegistryToken’. This variable is pulled from the 'arzure-artifacts-npm-token' variable group.  You must authorize this build to use that group: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml#use-a-variable-group
    - template: ./seed-npmrc.yaml
      parameters:
        npmrcDir: $(System.DefaultWorkingDirectory)
        artifactsRegistryToken: ${artifactsRegistryToken}

    - powershell: |
        $artifactPaths = Get-ChildItem "$(packsDir)\*.tgz"

        Push-Location npmjs

        npm config list

        foreach ($artifactPath in $artifactPaths) {
          Write-Output ""
          Write-Output ("Processing Artifact: '" + $artifactPath.Name + "'...")

          $cmd = "npm publish $artifactPath 2> `$null"

          Write-Output ("Running '" + $cmd + "'...")

          npm publish $artifactPath
          Write-Output ("Done processing Artifact: '" + $artifactPath.Name + "'...")
        }

        Pop-Location
